This file contains installation instructions for Siena.

Installation Instructions for the Impatient
===========================================

  1. ./configure
  2. make
  3. make install

Basic Installation
==================

Siena can be configured using the `configure' shell script.
`configure' attempts to guess correct values for various
system-dependent variables used during compilation, including
sub-system dependencies.

Dependencies

In order to compile Siena you need:

 - a C++ compiler. `configure' can find the C++ compiler in your
   current path.  However you can also specify one particular compiler
   by setting the CXX environment variable. E.g.:

   setenv CXX /opt/c++/bin/c++
  
 - the GNU gdbm library (http://www.gnu.org/software/gdbm/gdbm.html)

   `configure' looks for the gdbm library in the default include and
   library directories.  You can direct `configure' to the right paths
   by using the following command-line switces:

      --with-gdbm-include=dir  finds gdbm includes in dir
      --with-gdbm-libdir=dir   finds gdbm library in dir

 - a POSIX threads library

   `configure' looks for the pthread library in the default include
   and library directories.  You can direct `configure' to the right
   paths by using the followin command-line switces:

      --with-pthreads-include=dir     finds pthreads includes in dir
      --with-pthreads-libdir=dir      finds pthreads libraries in dir
      --with-pthreads-libs=libraries  pthreads library (default=-lpthread)


Building and Installing Siena

We suggest that you build Siena into a separate directory than the
sources.  This is how we build and test Siena, however a build in the
source directory should still work fine.  For more information on
separate build processes, see ``Compiling For Multiple Architectures''
below.  In practice, assuming you unpacked the source distribution in
SRCDIR:

  1. create a build directory (preferably not within the source tree)

  2. cd into the build directory

  3. if necessary, set the environment variable CXX to your C++
     compiler

  4. run `configure'.  If necessary, specify an installation prefix
     and various includes and library paths (see Dependencies above):

     SRCDIR/configure --prefix=/usr/tools

  5. build Siena:

     make

  6. install Siena:

     make install

You can remove the program binaries and object files from the build
(or source) directory by typing `make clean'.  To also remove the
files that `configure' created (so you can compile the package for a
different kind of computer), type `make distclean'.

If you have any problem configuring, building, or installing Siena,
please contact Antonio Carzaniga <carzanig@cs.colorado.edu>.

What follows is a set of generic instructions for using the
`configure' script.

Compilers and Options
=====================

   Some systems require unusual options for compilation or linking that
the `configure' script does not know about.  You can give `configure'
initial values for variables by setting them in the environment.  Using
a Bourne-compatible shell, you can do that on the command line like
this:
     CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure

Or on systems that have the `env' program, you can do it like this:
     env CPPFLAGS=-I/opt/include LDFLAGS=-s ./configure

Compiling For Multiple Architectures
====================================

   You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you must use a version of `make' that
supports the `VPATH' variable, such as GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.

   If you have to use a `make' that does not supports the `VPATH'
variable, you have to compile the package for one architecture at a time
in the source code directory.  After you have installed the package for
one architecture, use `make distclean' before reconfiguring for another
architecture.

Installation Names
==================

   By default, `make install' will install the package's files in
`/opt/bin', `/opt/man', etc.  You can specify an
installation prefix other than `/opt' by giving `configure' the
option `--prefix=PATH'.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
give `configure' the option `--exec-prefix=PATH', the package will use
PATH as the prefix for installing programs and libraries.
Documentation and other data files will still use the regular prefix.

   In addition, if you use an unusual directory layout you can give
options like `--bindir=PATH' to specify different values for particular
kinds of files.  Run `configure --help' for a list of the directories
you can set and what kinds of files go in them.

   If the package supports it, you can cause programs to be installed
with an extra prefix or suffix on their names by giving `configure' the
option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.

Optional Features
=================

   Some packages pay attention to `--enable-FEATURE' options to
`configure', where FEATURE indicates an optional part of the package.
They may also pay attention to `--with-PACKAGE' options, where PACKAGE
is something like `gnu-as' or `x' (for the X Window System).  The
`README' should mention any `--enable-' and `--with-' options that the
package recognizes.

   For packages that use the X Window System, `configure' can usually
find the X include and library files automatically, but if it doesn't,
you can use the `configure' options `--x-includes=DIR' and
`--x-libraries=DIR' to specify their locations.

Specifying the System Type
==========================

   There may be some features `configure' can not figure out
automatically, but needs to determine by the type of host the package
will run on.  Usually `configure' can figure that out, but if it prints
a message saying it can not guess the host type, give it the
`--host=TYPE' option.  TYPE can either be a short name for the system
type, such as `sun4', or a canonical name with three fields:
     CPU-COMPANY-SYSTEM

See the file `config.sub' for the possible values of each field.  If
`config.sub' isn't included in this package, then this package doesn't
need to know the host type.

   If you are building compiler tools for cross-compiling, you can also
use the `--target=TYPE' option to select the type of system they will
produce code for and the `--build=TYPE' option to select the type of
system on which you are compiling the package.

Sharing Defaults
================

   If you want to set default values for `configure' scripts to share,
you can create a site shell script called `config.site' that gives
default values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.

Operation Controls
==================

   `configure' recognizes the following options to control how it
operates.

`--cache-file=FILE'
     Use and save the results of the tests in FILE instead of
     `./config.cache'.  Set FILE to `/dev/null' to disable caching, for
     debugging `configure'.

`--help'
     Print a summary of the options to `configure', and exit.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.  To
     suppress all normal output, redirect it to `/dev/null' (any error
     messages will still be shown).

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`--version'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`configure' also accepts some other, not widely useful, options.
